[
  
  {
    "title": "AI & Morality - What is Algorithmic Fairness?",
    "url": "/posts/fml-part2/",
    "categories": "blog",
    "tags": "ai/ml, data-science, ethics, thought-leadership",
    "date": "2023-06-07 11:00:00 +1000",
    





    "snippet": "This blogpost was originally released through the Good Data Institute (GDI), where I work as a Fellow to to give not-for-profits access to data analytics support &amp; tools for social and environmental good. If you’d like to learn more about GDI, check their website here.Picture taken in Aotearoa New Zealand   If you are arrested in the U.S. today, COMPAS or an algorithm like it will likely influence if, when and how you walk free. ‘Ethics for Power Algorithms’ by Abe Gong (Medium)In the previous part of this series, I argued that the productionisation of AI/ML has and will continue to amplify unfairness and societal bias. In short, societal bias refers to the conglomeration of non-statistical social structures that have historically harmed underrepresented demographic groups. This type of bias makes fair decision-making by an algorithm more difficult or even impossible. For example, in the late 19th and early 20th centuries, the Jim Crow laws unfairly oppressed African-Americans in the Southern United States. In turn, these laws would have induced statistical bias since more data about African-American ‘offenders’ would have been collected.The cost of deploying AI/ML algorithms into production is ever decreasing due to technological advances in hardware, as well as the appearance of cloud services such as Amazon Web Services or Microsoft Azure (decreasing the cost of storage and compute). This, along with the revolution in generative AI that we are currently experiencing (e.g., ChatGPT), will enable many practitioners to get AI/ML algorithms out into the world in a ‘deploy first, ask questions later’ fashion. That is, not understanding the societal impacts and  as a consequence of this, we will see biased AI/ML products being deployed at an ever growing rate.To mitigate these risks, we must program a sense of fairness into these AI/ML algorithms. However, for data practitioners, that is no easy task because fairness is a sociological and ethical concept that often lies outside their comfort zone of technology and mathematical optimisation. For example, in 2017 Amazon scrapped a ‘secret’ AI/ML recruiting tool that favoured hiring males. Because the training data was composed of recruitment information from a male-dominant industry (IT), the algorithm ‘learned’ that males were more preferable for IT roles.In this post, I’ll provide a quick walkthrough on algorithmic fairness: outlining some existing definitions from this field and discussing why developing a golden standard for algorithmic fairness is so complicated. To illustrate this discussion, I will design a simplified version of a recidivism AI/ML algorithm. This type of algorithm is used to predict the likelihood that an ex-convict will re-offend. In turn, this prediction can be used to inform the passing of a sentence or setting the conditions of parole.If you’d like to learn how GDI has partnered with the non-for-profit Brother 2 Another to decrease recidivism using a different approach (from the one discussed in this article), read this blogpost here.Just Enough MLGetting from data to prediction involves many moving &amp; inter-twinned components. As a result, AI/ML products will be complex and dynamic constructs. Dealing with this complexity has led practitioners to develop patterns such as the ‘AI/ML Product Lifecycle’. In this section, I’ll give an example of an AI/ML algorithm and illustrate each component of its lifecycle.Imagine we would like to build a classifier that will label ex-convicts as low- or high-risk to be re-arrested within some years from release based on a set of attributes (e.g., how much they earn, in what district they live, whether they went to university or where they went to school). This classifier algorithm is a simplified version of the controversial COMPAS recidivism algorithm, which we discussed in the previous post. In short, this algorithm labels ex-convicts as high-risk or low-risk based on the algorithm’s estimated likelihood that these ex-convicts will reoffend within some time (e.g., two years) as we can see in the image below.Courtesy of Machine Bias by Propublica For example, following the ‘AI/ML Product Lifecycle’ diagram above, each step would look like the following with our recidivism example:      Data Collection &amp; Data Preparation: We curate a dataset representative of the problem we’re trying to solve. In the case of a recidivism algorithm like COMPAS, this might include gathering anonymised features about ex-convicts that both reoffended and didn’t reoffend within two years from release. Next, we’d have to clean up the data so it has no missing or erroneous values. This step typically requires first an Exploratory Data Analysis (EDA), where we investigate our dataset’s main characteristics and distribution.        Model Selection: Once we’ve gathered, cleaned and understood our data, we will have to choose an ML model into which we can feed our data. The problem we’re trying to solve will often constrain the models we should select. Since our example is classifying individuals based on some attributes, we will choose the logistic model (or logit model) as it’s the canonical model for this classification problem, given by the following formula (where Y=1 is a high-risk label, the x’s represent attributes from the datasets, and w’s act as weights to prioritise attributes):        Feature Engineering: This technique refers to designing ways of extracting features from the dataset. Feature engineering can take many forms, but for example, a transformation of the data (e.g., a z-transformation) might improve the performance of our model. Feature engineering can also be applied after model validation to improve our model’s performance. While improving a model’s performance can also be achieved for example by enhancing our training data or even choosing a different model altogether, feature engineering tends to be the best strategy we can choose.        Model Training &amp; Tuning: In this step, we split our data into training and test data. With the training data, the model learns the most optimal choice of weights (w’s in the formula above) that minimises the error. For example, attributes of the dataset such as criminal history or age might predict likelihood of recividism better than others. In this step, we can also tune the model’s hyperparameters to improve its performance, which mainly consists of tweaking the model parameters that are not optimised by the model (e.g., learning rate or the model’s initial parameters).    Model Evaluation: Once we have trained the model, we will feed it the test data to evaluate how it’s likely to perform with data it has never seen. Evaluation of the model will typically involve setting one or more acceptance criteria thresholds. If the model doesn’t meet those thresholds, we will go back and fine-tune the model to increase its performance. The evaluation process will depend on the problem we’re solving and the model we chose. In the case of a classification problem (like our example), we will use the confusion matrix (shown in the figure above) as the foundation for our model validation. In other words, for our logistic model, we need to consider four possible prediction outcomes when we feed each test data record. More generally, each of these belongs to either the positive or negative class, which in our example corresponds to low- or high-risk labels of recidivism respectively:      True Positive (TP): The model correctly labelled an ex-convict as high-risk who actually reoffended within two years from release.        True Negative (TN): The model correctly labelled an ex-convict as low-risk who had not reoffended within two years from release.        False Positive (FP): The model incorrectly labelled an ex-convict as high-risk when actually they hadn’t reoffended within two years from release.        False Negative (FN): The model incorrectly labelled an ex-convict as low-risk when in fact, they did reoffend within two years from release within two years from release.  Once we have these four scenarios, we can combine them to define validation metrics. For example, the most widely-used metric is accuracy, given by Acc = (TP+TN)/(TP+TN+FN+FP). We will come back to these metrics in more detail in the next section, as this step is the most important of the ‘AI/ML Product Lifecycle’ for algorithmic fairness.Note that this is a static and simplified version of a realistic scenario. To fully operationalise the model, we’d also need a deployment strategy, monitoring, continuous training and other CI/CD practices in place. Addressing these challenges (and more) has led to the emergence of MLOps, which is outside the scope of this post (you can read more about MLOps here).Defining Algorithmic FairnessDifferent biases can emerge from different phases of the AI/ML product lifecycle. I recommend reading this blog post to learn more about the ‘how’. Because AI/ML algorithms are susceptible to bias in most components of their AI/ML product lifecycle, the development of ‘fair’ AI/ML algorithms typically becomes a difficult task.‘Fair Machine Learning’ (Fair ML or FML for short) has emerged as the active field of research that aims to define fairness in ML algorithms technically. Generally, these definitions will require a performance metric to be the same across demographic groups.To illustrate some of these definitions, we will build on our recidivism algorithm above. In the last section, we learnt that before deploying our model, we would test its performance against some validation metrics.Although accuracy is frequently the only metric ML and data practitioners use, many have criticised it as an imprecise and vague metric (see this thread for more info). For example, it does not tell us how good the model is at misclassifying records into the positive or negative class. Luckily, more combinations of the confusion matrix will give us further metrics. Some examples include:      Precision (or Positive Predictive Value - PPV): Fairly popular metric that measures the positive predictive power of the model given by the following formula: PPV = TP/(TP+FP). For our recidivism example, this translates to measuring how well the algorithm is at correctly labelling ex-convicts as low-risk.        False Positive Rate (FPR): Fraction of misclassified positives (low-risk) out of all actual negative cases given by FPR = FP/(FP+TN). In other words, this would correspond to the fraction of records misclassified as low-risk out of all the actual high-risk individuals.        False Negative Rate (FNR): Fraction of misclassified negatives (high-risk) out of all actual positive cases: FNR = FN/(FN+TP). In our example, FNR would measure the fraction of misclassified high-risk individuals out of all actual low-risk cases.  Because most definitions of algorithmic fairness require one or more performance metrics to be the same across different groups, we will inevitably get many definitions of algorithmic fairness. As we discuss in the next section, all these definitions make developing a golden standard for algorithmic fairness difficult or even impossible.Fairness through UnawarenessFor the sake of simplicity and to follow other articles discussing COMPAS, imagine we have two demographic groups A and B, representing black and white ex-convicts respectively. One of the earliest definitions of algorithmic fairness is Fairness through Unawareness. This definition is satisfied when no sensitive attribute (race, gender, age, or disability) is used in the algorithm’s decision-making process. For our recidivism example, this would be satisfied if we removed all sensitive attributes from the training data (e.g., age or race) and our model satisfied the following formula: P(A, X_A) = P(B, X_B) if X_A = X_B. However, as we’ll learn in the next section, this definition has severe limitations.Statistical ParityMore generally, algorithmic definitions of fairness can be classified based on what outcomes they focus on: predicted or actual [1]. Definitions based on predicted outcome are the most naive and intuitive notions of fairness. An example belonging to this class is Statistical Parity. This definition requires the probability to be assigned to the positive class to be the same for both A and B, which would be given by (TP+FP)/(TP+FP+FN+TN). For our algorithm, this would be satisfied if the algorithm would be as good at labelling black ex-convicts as low-risk as labelling white ex-convicts as low-risk, regardless if the prediction was correct.  However, the limitation of this type of definition is that it only focuses on what the algorithm predicted rather than on whether it got the predictions right or wrong.Predictive EqualityThe limitation of statistical parity is covered by fairness definitions that consider actual outcome. An example is Predictive Equality, which is satisfied when both groups have the same False Negative Rate, i.e., FPR(A) = FPR(B). In the case of our COMPAS-like algorithm above, this would be satisfied if the fraction of high-risk individuals who were misclassified as low-risk is the same for both black and white ex-convicts.Equalised OddsEqualised Odds is an extension of Predictive Equality that also requires the False Negative Rate to be the same across both groups: FPR(A) = FPR(B) &amp; FNR(A) = FNR(B). In addition to FPR, in our example, this would be satisfied if the fraction of ex-convicts who were misclassified as high-risk when they were actually low-risk would be the same for both black and white individuals. This is a great definition of fairness that allows us to measure how poor a model is at misclassifying models, and what the disparities are across groups. However, as we’ll learn in the next section, Equalised Odds still has some limitations that are intrinsic to Fair ML.Challenges &amp; OpportunitiesMany challenges lie ahead to leverage algorithmic fairness, and Fair ML does not fall short of these challenges. For example, studies have shown that algorithms can satisfy some definitions of fairness while violating others [2]. However, this is not so much a constraint of the field of Fair ML but rather a challenge to the application of Fair ML into different real-world domains. In other words, in some applications e.g., the legal system, some definitions of algorithmic fairness will be more suitable than others, but this might be different for instance in the health care system.Moreover, most (if not all) of the examples of fairness definitions above have limitations. For instance, Fairness through Unawareness is a naive definition of fairness because of proxies, which are non-sensitive attributes that correlate with sensitive attributes. The most notable examples include annual income and education history, which most often (especially in the United States) will correlate to race and socio-economic status. Proxies like annual income or education history are apparent, so they can be spotted and removed from train and test datasets. Unfortunately, other more insidious proxies like postcode, online browsing and purchasing history make it extremely difficult (or even impossible) to remove all sensitive proxies from the algorithm’s decision-making process.In the case of Predictive Equality, we are making the implicit assumption that FPR is more fair than FNR. However, is that a reasonable assumption? From a fairness perspective, I’d argue that FNR captures fairness better than FPR because FNR measures the fraction of individuals who were misclassified as high-risk when in fact they were low-risk (and could potentially lead to them going to jail unfairly or getting an unfair parole). Nonetheless, from a civic safety point of view, one might argue that FPR is more important as you wouldn’t want to misclassify individuals as low-risk when they are very likely to reoffend.To remediate this, we could follow the pattern in Equalised Odds and keep requiring more performance metrics to be equal across groups to obtain a golden standard for algorithmic fairness. However, some of these performance metrics are incompatible with each other,  and thus, so will be some definitions of fairness too. For example, as pointed out by Chouldechova in her ‘The Frontiers of Fairness in Machine Learning’ paper:  except trivial settings, it is impossible to equalise FPR, FNR and PPV [(precision)] across protected groups simultaneously. [3]Even if we had a golden standard definition of algorithmic fairness, Fair ML has more fundamental limitations because of its statistical approach. That is, none of these definitions of fairness will guarantee fairness to anyone as an individual. Instead, Fair ML can only offer fairness to the ‘average’ member of the under-represented demographic group.Because of the landscape of fairness definitions that Fair ML offers, deciding what fairness definition is best suited will depend a lot on the problem domain. This presents an opportunity for data practitioners to collaborate and learn from domain experts. In our recidivism example, working with criminologists will be crucial to developing a fair AI/ML algorithm, as criminologists have conducted criminal justice assessments since the 1920s [4]. For example, evidence seems to suggest that males are more inclined towards violent crime than females (read this criminology article for more information).In summary, society cannot wholly rely only on technical definitions of algorithmic fairness, and ML Engineers cannot reinvent the wheel and establish what fairness represents across different domains.Closing ThoughtsThis post has introduced Fair ML, an active field of research that aims to define and measure fairness in algorithms technically. This field holds great promise as it can provide data and AI/ML practitioners with systematic tools for measuring unfairness aimed at mitigating algorithmic bias. These tools can be essential not only for data practitioners but for stakeholders and society as whole in a world of ever-expanding biased AI/ML algorithms for decision-making. Unfortunately, this field has some limitations, some of which we discussed in this post. Mainly, although there are at least 20 definitions of algorithmic fairness in the literature, most of these definitions have shortcomings. Moreover, studies have shown that some of these definitions are incompatible.Ideally, I’d personally like to see a golden standard with an agreed definition of algorithmic fairness. Then, AI/ML products would have to pass rigorous tests to be certified as algorithmically fair, similar to organic and cruelty-free products. However, I don’t see this happening anytime soon (if at all) because of the limitations of Fair ML as well as the overall complexity of this techno- and sociological topic. Realistically, organisations need to pick up one definition of fairness that aligns with their values and stick to it, making that explicit as well as making themselves accountable if they fail to follow this definition of fairness, as discussed in the previous post of this series.  in the end, it will fall to stakeholders – not criminologists, not statisticians and not computer scientists – to determine the tradeoffs […]. These are matters of values and law, and ultimately, the political process. [4]Algorithms cannot be the only resource for decision making. In a best-case scenario (when they are not biased), these algorithms can provide a prediction probability. ML Engineers cannot or should not be the only contributors that will champion this space. This, however, presents an opportunity for ML practitioners and stakeholders to embrace the interdisciplinary nature of Fair ML and work with problem-domain experts. In our example of the recidivism algorithm, it’d be foolish not to work with criminologists to build the algorithm as they have conducted criminal justice assessments since the 1920s [4].Finally, it is essential to acknowledge and respect the ‘hierarchy of risks’ when it comes to deployment and roll-out of AI/ML technology. For example, misclassifying ex-convicts as high-risk has more detrimental implications for their human welfare than misclassifying what movie they’re likely to enjoy. Likewise, misclassifying a person as not fit for a particular job role has more damaging implications to that person and their career than misclassifying what next product they’re most likely to buy online. AI/ML algorithms used for decision-making are in their very infancy, so whatever breakthrough or insight we might come across, we must put it under scrutiny and work iteratively.Academic References[1] Mitchell, S., Potash, E., Barocas, S., D’Amour, A., &amp; Lum, K. (2018). Prediction-Based Decisions and Fairness: A Catalogue of Choices, Assumptions, and Definitions. arXiv e-prints. https://arxiv.org/abs/1811.07867[2] Chouldechova, A. (2016). Fair prediction with disparate impact: A study of bias in recidivism prediction instruments. arXiv e-prints. https://arxiv.org/abs/1610.07524[3] Chouldechova, A., Roth, A. (2018). The Frontiers of Fairness in Machine Learning. arXiv e-prints. https://arxiv.org/abs/1810.08810[4] Berk, R., Heidari, H., Jabbari, S., Kearns, M., &amp; Roth, A. (2021). Fairness in Criminal Justice Risk Assessments: The State of the Art. Sociological Methods &amp; Research, 50(1), 3–44. https://doi.org/10.1177/0049124118782533"
  },
  
  {
    "title": "The Productionisation of AI/ML - ‘The Golden Era’ or ‘The Wild West’?",
    "url": "/posts/fml-part1/",
    "categories": "blog",
    "tags": "ai/ml, data-science, ethics, thought-leadership",
    "date": "2022-10-17 11:00:00 +1000",
    





    "snippet": "This blogpost was originally released through the Good Data Institute (GDI), where I work as a Fellow to to give not-for-profits access to data analytics support &amp; tools for social and environmental good. If you’d like to learn more about GDI, check their website here.Picture taken in Aotearoa New Zealand Data Science has come to permeate almost every aspect of our society. Machine Learning and Artificial Intelligence (AI/ML) algorithms are being deployed at scale to facilitate our daily lives. Whether it’s filtering our spam emails, giving us directions, or nudging what we watch on streaming platforms, this technology has integrated seamlessly with our digital lives. These algorithms are also present in pivotal aspects of our lives, for example, by deciding whether we’ll be short-listed for an interview, or whether our bank loan will be approved. Meanwhile, in the public sector, algorithms are becoming more critical for decision-makers in both the policy and legal spheres.Over the last 50 years, Hollywood has painted a picture of a long-term AI apocalypse where civilisation would be destroyed by killer robots. However, the last decade has revealed a more sneaky reality: even today, AI/ML is creating harm in our society and it has the potential to further scale up injustice and unfairness.This post is the first part of a series about Ethics and Data Science. In this part, I will discuss the current picture mentioned above by describing the challenges present, outlining some examples of harmful AI/ML algorithms and discussing how this harm stems from the root. More importantly, I will propose some actionable items that organisations and data practitioners can take to leverage a fair use of data. Whether you are a data professional or simply interested in this topic, I hope to convince you of the importance of ethical practices in Data Science.ChallengesDespite Hollywood’s post-apocalyptic depiction of AI, I don’t think AI/ML algorithms are inherently evil. They are powerful tools that can be used for the benefit or detriment of our society. So how could they become harmful at all? One of the main issues we face is that these algorithms learn behaviour from data about how the world is, instead of how the world should be. To clarify this point, let’s consider the following quote [3]:  Statistical and machine learning models are designed to identify patterns in the data used to train them. As such, they will reproduce, to the extent that they are predictive, unfair patterns encoded in the data or unfairness in the problem formulation described above.That is, these algorithms have the power to amplify whatever is present in the data that the algorithm is trained on. If there are unfair or biased patterns in the data, these will be reflected in the output of the algorithm. The challenge is that by default, the data used as input in these algorithms is biased towards unfairness and underrepresentation. The concept of bias is useful as it can help us understand under what circumstances these AI/ML algorithms become unfair. But how does this harm originate in the first place and what exactly do I mean by bias?Bias in Data ScienceIn the context of this series, bias relates to outcomes of AI/ML algorithms that favour subsets of the population based on a human factor (age, gender, disability, ethnicity, ….). At the most general level, one can think of two main sources of bias related to Data Science:      Statistical Bias: The systematic discrepancy between the data used to train an AI/ML algorithm and the world as it is. This type of bias normally occurs when the training data is not representative of the full population [3]. For example, a study found that most off-the-shelf Computer Vision (CV) algorithms are trained with oversampled white facial images because the data was mostly collected in Western Countries [6].        Societal Bias: The ensemble of non-statistical social structures that make fair decision-making by a model more difficult or even impossible. For example, even if we could measure crime 100% accurately, there might be a normative bias due to an unjust policing system even if there’s no statistical bias.  Figure courtesy of Mitchell et al. 2018 [3]. Addressing issues of societal bias may require adjusting data collection processes, or unfortunately may not have a technical solution at all. Moreover, these two types of biases overlap with each other. For example, societal bias might affect the definition of how crime is defined, thus introducing statistical bias. In this series, I will mainly be focusing on statistical bias, as I think it’s easier to tackle algorithmically for individual data practitioners developing AI/ML products. However, because of the interconnectedness between societal and statistical bias, societal bias will naturally creep in throughout the series. For the interested reader, there have been some proposals in the literature to directly tackle societal bias in Data Science, for instance by embracing the notion of Intersectionalism (you can read more in this paper [2]).*Recognising these biases requires a retrospective understanding of how systematic injustice has manifested and developed in many domains over time. To leverage fair AI/ML products, professionals will benefit from upskilling in non-technical areas. For example, critical race theory will help practitioners understand the systematic underrepresentation of marginal groups in datasets. However, having to upskill in non-technical aspects of fairness will make many uncomfortable. I don’t mean morally uncomfortable (at least I would hope so), but in a constantly evolving tech-world where professionals have to constantly learn new tools and frameworks to keep up with industry, having to upskill in something outside of their domain of expertise will add more pressure to individuals as well as excuses for organisations to not develop AI/ML algorithms fairly. This is where organisations need to support individuals with the resources and encouragement to upskill in these non-technical areas. All organisations (whether big or small), should strive to make Data Ethics the norm and not a ‘would be nice’.Productionisation of AI/ML: ‘The Golden Era’ or the ‘Wild West’?In the last decade we’ve seen an explosion of harmful examples of AI/ML algorithms. However, these algorithms have been around for a lot longer in academia and industry research. For example, OXO was released in 1952 as the first algorithm that could play the perfect game of tic-tac-toe. More triumphantly, in 1997 IBM’s Deep Blue algorithm beat the world chess champion. So what has gone wrong in the last few years? In my opinion, the productionisation of AI/ML by market forces has accelerated the harm AI/ML algorithms pose to our society. But what exactly do I mean by productionisation of AI/ML?Both executives and investors are celebrating the ‘Golden Era of AI’, pouring millions into the development of AI/ML algorithms to derive profit while making their business success reliant on this technology. A survey of 1000 U.S. senior executives found that ‘93% of respondents say that emerging technologies, including deep learning, machine learning, and artificial intelligence, help their businesses be more competitive’.By now, there’s no doubt that AI/ML has immense potential to create business value. It’s no coincidence that the most successful tech companies are embedding AI/ML in the core of their products (think of Netflix, Spotify, Youtube, Amazon, …). However, when hearing business professionals talk of the ‘Golden Era of AI’ and its opportunities, I find it hard not to think of the Californian ‘Gold Rush’ in the 19th century. Historically, gold turned this land into the ‘Wild West’, and amongst other things, it led to the mass massacre and displacement of Native Americans in the area. While AI/ML has not got to that stage yet, the ‘AI/ML Rush’ is much more scalable and present in our society than gold mining. It’s also not short of harmful examples even today.For instance, in 2015 the Google Photos app mistakenly labeled African American people as ‘Gorillas’. More recently, OpenAI released DALL-E 2, an AI/ML algorithm that takes written text as input and generates an image from scratch. When instructed to produce images for trades that are stereotypically based on gender or race, DALL-E generates racial and gender-biased images. While OpenAI acknowledged this bias in their release statement, I don’t think acknowledgment leads to justification in this case. If you don’t think that’s enough examples, you can find more real-life examples of biased AI/ML products in this article.By this point, you might argue that all these examples might have offended subsets of the population, but have not caused ‘real harm’ to anyone. However, considering the influence of AI/ML in the legal system might change your opinion. For example, a software company called Equivant developed COMPAS, an AI/ML algorithm that uses data from previous offenders to predict the risk of recidivism (re-offending). After it had been deployed in production, this algorithm has been shown to suffer from both gender and racial bias. That is, COMPAS is more likely to tag black people and males as high-risk than white people and females respectively.Just like in the Hollywood depiction of the ‘Wild West’, it’s become a common practice for AI/ML organisations and data professionals to ‘shoot first and ask questions later’. Personally, I would be dubious of any AI/ML advocate who hails the ‘Golden Era of AI’ without acknowledging all the potential harms associated with AI/ML products.OpportunitiesWe’ve learned that data practitioners and organisations face challenges to leverage AI/ML products ethically. Given the lay of the land I’ve outlined above, there are many opportunities for organisations to leverage a fair use of data. The good news is that even smaller organisations have the potential to become champions in this space and lead the way.How can organisations leverage ethical practices around Data Science?Over the last years, we’ve seen many tech organisations come up with codes of conduct or set of principles for ethical data science (e.g. Microsoft, Google, IBM or Intel). More recently, these codes of conduct are becoming more tokenistic as we’ve seen companies being involved in AI/ML scandals even when their code of conduct was being ‘followed’. Here’s a list of actionable steps that organisations can use to mitigate the potential harms of AI/ML products:      Make your organisation accountable: Having an ethical code of conduct is (or should be) a statement of intent for wanting to leverage data science ethically. However, at the end of the day, intent is not nearly as important as outcome and results [4] (p.100-110). Therefore, organisations need to make themselves explicitly accountable when they deploy biased AI/ML products. ‘Faking ethics’ should be regarded as detrimental as faking data or results [8], and hopefully the legal system will leverage this accountability too.        Understand the trade-offs: Developing AI/ML products comes at a cost. For example, what should organisations do when there’s no available data from a given population sub-group, thus leading to statistical bias? One can spend more resources collecting an even number of representative data samples or tackle this challenge with algorithmic tools (e.g. data augmentation in Computer Vision). However, these methods are time- and resource-consuming, and as such organisations must be willing to pay the price of fairness, remembering that ‘minimising the error fits majority groups’ [1].        Strive for diversity across your organisation: Whether they realise or not, developer teams will be more susceptible to societal bias if all members come from a specific demographic (regardless of team members’ character and political alignments). Ensuring that all teams in your organisation are diverse across demographic factors (e.g. ethnicity, gender and disabilities) is crucial to flag and mitigate bias througout the AI/ML product lifecycle. In line with the item above, this very often comes at a cost (especially in recruitment), so organisations ought to be willing to pay the cost if they are committed to AI/ML fairness.        Auditability is not everything: Over the last years, there’s been more talk about the audibility of AI/ML products. The goal of auditability is to clearly document when decisions are made and, if necessary, backtrack to an earlier dataset and address the issue at the root. While good documentation and data lineage can be useful in this regard, auditability alone cannot guarantee an ethical use of data.        Context is crucial: AI/ML products are not developed and deployed into echo chambers. They are complex constructs created by humans whose outcomes affect a very large part of society. Therefore, having an understanding of the context surrounding an AI/ML algorithm is crucial for Fair Machine Learning. This affects every stage of the AI/ML product lifecycle: from data acquisition to cleaning, to interpretation of findings, and dissemination of the results. To minimise the chance of disregarding context, here are some questions you and your team can ask during development and deployment of AI/ML products [3], [8]:                  What’s the training dataset? How was it curated?                    What are the potential sources of societal and statistical bias?                    What’s the subset of the population that will be affected by the algorithm? Did they agree to be involved in the algorithm’s output?                    How will the deployed algorithm lead to decision-making?                    How are the stakeholders involved in the product? Does that affect the algorithm’s architecture?                  Enable and encourage debates around fair use of data: These conversations should be a topic that it’s discussed widely in the organisation. It cannot be something that only a couple data scientists in the organisation think about. Organisations thus have the responsibility to create a culture of psychological safety, where people feel comfortable speaking their own mind. This means debating and challenging what fair use of data entails, even if that’s at odds with the organisation’s financial interest.  Conclusions &amp; Next StepsIn this article, I hope I have convinced you of the risk that near- and mid-term productionisation of AI/ML can pose to society. We learned some examples of current AI/ML products that misclassify humans based on gender, ethnicity and socioeconomic status. We also learned that Data Ethics is a complex challenge because it encompasses both social, moral and technological areas.One of the greatest challenges in this topic is that organisations and individuals will develop and deploy biased AI/ML, many times even without realising because of statistical and societal bias. Organisations need to understand that ‘fairness is not one-size-fits-all’ [7] and to mitigate the risk of harmful AI/ML, I proposed some actionable steps that organisations and data practitioners can take. For example, organisations need to enable and encourage debates around the fair use of data, as well as make themselves accountable when they deploy harmful or unethical AI/ML algorithms. For data practitioners specifically, asking meaningful questions will help them understand the context around the human aspect of the data. Because of the many moving components of AI/ML algorithms (both in development and deployment), interpreting context ethically is one of the main challenges that data practitioners will have to face if they aspire to be moral professionals. Whether it is you or your organisation, by ignoring Data Ethics concerns you’re already making a choice, you’re just not aware of it.Another challenge for data practitioners is to understand how the potential roots of harm can appear as inputs in AI/ML algorithms, and from there architect these algorithms so that they produce fair outcomes instead of unfair ones. By collaborating with charities, at the Good Data Institute (GDI) we spend most of our time trying to showcase to the world how the power of Data Science can be used for social and environmental good.In the next part of this series, I’ll delve deeper into how we can algorithmically define a sense of fairness to hopefully program it into AI/ML algorithms. This will be a more technical endeavour that will lead me to introduce field Fair Machine Learning (FML). This turns out to be a very difficult task, but in a nutshell, FML aims to address statistical and societal bias by ensuring that the output of AI/ML algorithms doesn’t depend on sensitive inputs in a way that’s considered ‘unfair’. Examples of sensitive inputs include gender, ethnicity, socio-economic status, disability, or sexual orientation [5].  Statistical and structural biases can also be framed at different levels of perspective. For the interested reader, I recommend reading this article for a discussion of how different biases arise throughout the AI/ML product lifecycle.Academic References[1] Chouldechova, A. (2016). Fair prediction with disparate impact: A study of bias in recidivism prediction instruments. arXiv e-prints. https://arxiv.org/abs/1610.07524[2] Davis, J. L., Williams, A., &amp; Yang, M. W. (2021). Algorithmic reparation. Big Data &amp; Society, 8(2). https://doi.org/10.1177/20539517211044808[3] Mitchell, S., Potash, E., Barocas, S., D’Amour, A., &amp; Lum, K. (2018). Prediction-Based Decisions and Fairness: A Catalogue of Choices, Assumptions, and Definitions. arXiv e-prints. https://arxiv.org/abs/1811.07867[4] Noble, S. U. (2018). Algorithms of Oppression: How Search Engines Reinforce Racism. New York University Press.[5] Oneto, L., &amp; Chiappa, S. (2020). Fairness in Machine Learning. arXiv e-prints. https://arxiv.org/abs/2012.15816[6] Shankar, S., Halpern, Y., Breck, E., Atwood, J., Wilson, J., &amp; Sculley, D. (2018). No Classification without Representation: Assessing Geodiversity Issues in Open Data Sets for the Developing World. arXiv e-prints. https://arxiv.org/abs/1811.07867[7] Suresh, H., &amp; Guttag, J. (2019). A Framework for Understanding Sources of Harm throughout the Machine Learning Life Cycle. arXiv e-prints}. https://arxiv.org/abs/1901.10002[8] Zook, M., Barocas, S., Boyd, D., Crawford, K., &amp; Keller, E. (2017). Ten simple rules for responsible big data research. PLOS Computational Biology, 13(3). https://doi.org/10.1371/journal.pcbi.1005399"
  },
  
  {
    "title": "NLP analysis on SMS text - part II",
    "url": "/posts/nlp-sms-part2/",
    "categories": "data-portfolio",
    "tags": "nlp, data-science",
    "date": "2022-08-04 20:34:00 +1000",
    





    "snippet": "In the first part of this Natural Language Processing (NLP) series, I pre-processed a SMS dataset using spaCy. In this post, I’ll use the Python library sklearn to extract some insights from the dataset.Because we have a text-based dataset, we need to turn words into numerical objects to carry out our analysis. This leads us to the concept of vectorisation.VectorisationIn NLP, vectorisation is the process of mapping words in the corpus to numerical features so that we can more easily analyse the dataset mathematically - either by means of a statistical analysis or by feeding the vector into a Machine Learning algorithm. In this post I won’t be using any Machine Learning Algorithms.Bag-of-Words (BOW)When it comes to vectorising the corpus (text-dataset), the most naive approach is to create a Bag-of-Words through the CountVectorizer() object. This technique counts the number of times a lemma appears in the corpus. Once we have the number of counts for each lemma, we can go ahead and build a wordcloud to visualise what lemmas are most common in these SMS messages. Wordclouds give more weight to words that appear more frequently by scaling them up in size.As mentioned above, we’ll use sklearn to carry out the vectorisation:import numpy as npfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizerfrom wordcloud import WordCloud# create CountVectorizer() object and generate bow matrixcount_vectorizer = CountVectorizer(    lowercase=True,    stop_words='english',     ngram_range=(1,1))bow_matrix = count_vectorizer.fit_transform(lemmas)feature_names_bow = count_vectorizer.get_feature_names_out()# get word count to create a wordcloudword_count = np.asarray(bow_matrix.sum(axis=0)).ravel().tolist()wcount_dict = {word: count for word, count in zip(feature_names_bow, word_count)}def black_color_func(word, font_size, position, orientation, random_state=None, **kwargs):            return(\"hsl(0,100%, 1%)\")def make_wordcloud(    x,     bg_color='white',    cloud_width=3500,     cloud_height=2000,     maxwords=500):        plt.figure(figsize=(16,9))    cloud = WordCloud(        font_path='./data/arial-unicode-ms.ttf',         background_color=bg_color,         width=cloud_width,         height=cloud_height,         max_words=maxwords)    cloud.generate_from_frequencies(x)    cloud.recolor(color_func = black_color_func)    plt.imshow(cloud, interpolation=\"bilinear\")    plt.axis(\"off\")    plt.show()# build wordcloudmake_wordcloud(wcount_dict)Interesting! Some of the words that come up most often across all the corpus are ‘thank’, ‘know’, ‘good’, ‘come’, ‘night’, … This is quite intuitive as these seem very common words one would use in short-format messaging (e.g. ‘thank you’, ‘I’m coming’, ‘I think so’, …)Term Frequency Inverse-Document Frequency (TF-IDF)A less naive approach to capture important words is the Term Frequency Inverse-Document Frequency (tf-idf). Unlike a classical bag-of-words approach, tf-idf takes into account the number of documents in the corpus that contain each words. This helps highlight more special words that are common only in very few documents, and weighs down very common words across all documents. For more information on how TF-IDF is calculated, see its Wikipedia article here.# create TfidfVectorizer() object and generate tfidf sparse matrixtfidf_vectorizer = TfidfVectorizer(    stop_words='english',    lowercase=True)tfidf_matrix = tfidf_vectorizer.fit_transform(lemmas)feature_names_tfidf = tfidf_vectorizer.get_feature_names_out()# get word count to create a wordcloudweight_count = np.asarray(tfidf_matrix.sum(axis=0)).ravel().tolist()tfidf_count = np.array(weight_count)*np.array(word_count)if np.all(feature_names_tfidf == feature_names_bow):    tfidf_dict = {word: count for word, count in zip(feature_names_tfidf, tfidf_count)}# build tfidf wordcloudmake_wordcloud(tfidf_dict)Very similar to the BOW approach! We can see that some words like ‘hi’ become less important while other words like ‘yeah’ and ‘lol’ become more relevant, which is surprising as I’d expected these words to still be very frequent across all SMS.Part-of-Speech (POS) taggingMaking use of the spacy.nlp() pipeline which we created in part I, we can do more sophisticated analysis like Part-of-Speech tagging (POS). Loosely speaking, POS can be described as the process of capturing context in a corpus by labelling the words in the corpus according to the element of speech they belong to (noun, adjective, adverb, …).The pos tags were extracted and computed while pre-processing the data, but we can make a dataframe to make it clearer. Originally, I set out to build the df_pos in the following way:pos_dict = {word:tag for d_i in pos_tags for word, tag in d_i.items()}df_pos = pd.DataFrame.from_dict({    'word': pos_dict.keys(),    'pos_tag': pos_dict.values()})print(df_pos.sample(n=5, random_state=5))print(f'dataframe entries: {len(df_pos)}')         word pos_tag4654      fee    NOUN942    repair    NOUN2650  himself    PRON1104    spent    VERB4361     goot    NOUNdataframe entries: 7888However, this won’t work because dictionaries can’t have duplicate keys, so our dataframe will only have one entry per fixed word. Instead, we can use a list of tuples to create the POS dataframe:pos_data = [(word,tag) for d_i in pos_tags for word, tag in d_i.items()]df_pos = pd.DataFrame(pos_data, columns=['word', 'pos_tag'])df_pos['word'] = df_pos['word'].str.lower()                                 # make all the words lowercase for a more fair count print(df_pos.sample(n=5, random_state=5))print(f'dataframe entries: {len(df_pos)}')          word pos_tag33998        ?   PUNCT7390      when   SCONJ60175  because   SCONJ58601   amused    VERB61726       it    PRONdataframe entries: 65359And we see that it has almost x10 more entries than if we were storing the data in a dict.Now we can extract some basic insights, for example the distribution of tags along the corpus:df_count_pos = df_pos.groupby('pos_tag')['pos_tag'].count().\\                        reset_index(name='count').sort_values(['count'],ascending=True).reset_index(drop=True)# create histogram with pos_tag distributionfig, ax = plt.subplots(figsize=(16,9))sns.barplot(    data=df_count_pos,    y='pos_tag',    x='count',    palette=COLORS)plt.title('Distribution of Part-of-Speech tags')plt.grid(True)plt.show()Interestingly, we see that pronouns, verbs and nouns dominate in the corpus. This might be a proxy to the short-nature of SMS, since the messages have to be direct and for exmaple contain a high density of ‘I’, ‘you’, ‘we’, …, etc.Another thing we can look at is at the top 10 most frequent adjectives. This might gives us a sense of the overall sentiment of the corpus:df_adj = df_pos[df_pos['pos_tag'] == 'ADJ']df_adj_count = df_adj.groupby('word')['word'].count().\\                        reset_index(name='count').sort_values(['count'],ascending=False).reset_index(drop=True)print(df_adj_count.sort_values('count', ascending=False).head(n=10))    word  count0   good    1361  great     992  sorry     903   sure     904    new     615   much     576  other     557   last     498   more     459   free     44As expected from the WordCloud above, ‘good’ is the most common adjective. Just from this very broad view, we can see that the sentiment of the most used words is quite positive.SpotcheckNow we’d like to see how well our POS approach is performing. For that, we can take the most frequent adjective (good), and see how it compares to the count in the BOW model.df_bow = pd.DataFrame.from_dict({    'word': wcount_dict.keys(),    'count': wcount_dict.values()}).sort_values('count', ascending=False)print(f\"BOW 'good' word counts: {df_bow[df_bow['word'] == 'good']['count'].values[0]}\")print(f\"ADJ 'good' word counts: {df_adj_count[df_adj_count['word'] == 'good']['count'].values[0]}\")# create a spotcheck dataframedf_spk = df_pos[(df_pos['word'] == 'good') &amp; (df_pos['pos_tag'] != 'ADJ')]print(df_spk)print(f'dataframe entries in spotcheck dataframe: {len(df_spk)}')print(f\"# of 'good' entries missing: {df_bow[df_bow['word'] == 'good']['count'].values[0] - df_adj_count[df_adj_count['word'] == 'good']['count'].values[0] - len(df_spk)}\")BOW 'good' word counts: 182ADJ 'good' word counts: 136       word pos_tag3722   good    INTJ4058   good    INTJ9954   good    INTJ13146  good    NOUN13449  good    NOUN13619  good    INTJ15406  good    INTJ16990  good    NOUN29341  good    INTJ31037  good    INTJ33624  good    NOUN51220  good    INTJ51882  good    INTJ62734  good    INTJdataframe entries in spotcheck dataframe: 14# of 'good' entries missing: 32We see that most of the instances of ‘good’ that are not classified as ADJ are classified as INTJ (interjection), which probably corresponds to messages where ‘good’ is the only word (e.g. ‘Good!’ as an answer to an SMS).Also, it looks like there are 60 instances of the word ‘good’ that appear in the BOW model but not in the BOW model. This is most likely due to lemmatization. That is, the spacy.nlp() pipeline removing the ending of a word and transforming it into ‘good’ (e.g. ‘goodbye’, ‘goods’, …). To be more rigorous and test the validity of the en_core_web_sm model for SMS, I would have to do spotchecks for more words and drill down whether this might be due to lemmatization or other causes.Summary &amp; ConclusionsIn this project I’ve used basic NLP tools from the spaCy and sklearn libraries to study the nature of SMS texts on a public dataset. I hope I’ve convinced you that even basic NLP tools are able to extract insights from SMS data. Here are the main take-aways from this analysis:      NLP is able to capture and quantify the short and colloquial nature of SMS: Through vectorization (using the nltk.CountVectorizer() and nltk.TfidfVectorizer() models), the wordclouds show that the most dominant words in the SMS dataset are generic words such as ‘thank’, ‘know’, ‘good’ and colloquial words like ‘lol’, ‘haha’ or ‘hi’.        Classical NLP tools don’t work too well with a variety of languages: Because most of the available models on spacy are trained in one language only (English in the case of en_core_web_sm), it’s difficult to apply a NLP analysis on SMS dataset from countries that have a rich variety of languages. This is what motivated me to only consider SMS from the US (as opposed to Singapore or India).        SMS datasets are extremely sensitive to age bias: As described in Chen, T., Kan, MY. Creating a live, public short message service corpus: the NUS SMS corpus, the age distribution of collected SMS is corresponds mostly to an age group of between 18-24 years old (see figure 3 in the paper). The way people write SMS depends a lot on their demographic (i.e. younger people will write SMS differently than younger people) and therefore the results and conclusions from this analysis are most likely biased towards a younger demographic.        SMS is not really Natural Language: Unlike more formal text-based datasets (e.g. movie reviews or policy documents), SMS datasets are extremely loose in their use of language. Some equivalent words might not be captured by the model to be the same becuase they’re written different (e.g. ‘good’ vs. ‘gooood’) or some abbreviations might not be understood by the model (e.g. ‘lol’). This will affect the results we get from the NLP analysis since SMS is not really Natural Language in the written sense.  Further OpportunitiesI will finish with some final remarks about how one could extend and enhance this analysis:      Language Detection: One interesting question we could ask is: What are the most frequently used words outside of the country’s official language? For example, it’d be interesting to study what words (outside of English) are used most frequently in the USA (I’d expect they’d be Spanish). We could use one of the many Python libraries to detect language (e.g. spacy_langdetect or googletrans), filter out words in the official language(s) of the country, and run a similar vectorisation process as we did here.        Alternative stratification/binning: In this case I binned the data based on the country. I could bin the data based on age, sex or language. The latter would be especially useful given that most available NLP tools in Python cannot handle multilingual datasets. However, age and sex binning wouldn’t be possible in this dataset because the researchers didn’t capture that information. Given that language is heavily influenced by demographics, an alternative binning might give us different results and conclusions.        Sentiment Analysis: In this project I used the POS-tagger to get a very basic sentiment for the USA subset of this SMS dataset. We could use more sophisticated ML models for sentiment analysis, such as the VADER model. However, one should be careful to jump on the ML-train as these models are normally trained in datasets of a different domain. Also, we will sacrifice interpretability as these models tend to be a black box.        Named Entity Recognition: In addition to using a POS-tagger, we could run a Named Entity Recognition (NER) analysis, which uses tags words based named entities such as location or animal.  You can find all the code for this analysis on this GitHub repo. Stay tuned for part III of this series!"
  },
  
  {
    "title": "NLP analysis on SMS text - part I",
    "url": "/posts/nlp-sms-part1/",
    "categories": "data-portfolio",
    "tags": "nlp, data-science",
    "date": "2022-08-03 20:34:00 +1000",
    





    "snippet": "In this project, I’ll be using Natural Language Processing (NLP) to study an SMS dataset. I’m interested to understand whether NLP can tell us something about the nature of SMS.For the chosen dataset, I hope to answer some of the following questions:  What words are used most frequently in English SMS texting?  Is NLP a good tool to study short text like SMS?  What’s the main sentiment(s) of SMS texts as captured by basic NLP tools?  What are some potential sources of bias when studying SMS datasets?In part I of this series I will focus on the pre-processing of the data The main goal of this project is to showcase those who are not NLP experts (like me) the value of basic NLP tools. So let’s dive right in! First, I’ll import some neccesary packages and then have a look at the dataset:from jupyterthemes import jtplotfrom IPython.display import display_htmlfrom itertools import chain,cycleimport seaborn as sns%config InlineBackend.figure_format = 'retina'                                    # so you can see plots in HD :)sns.set(style=\"whitegrid\", font_scale=1.4)sns.set_palette(\"colorblind\")COLORS = sns.color_palette(\"deep\", 12).as_hex()darkmode_on = Trueif darkmode_on:    jtplot.style(theme='grade3', context='talk', ticks=True, grid=True)    def display_side_by_side(*args,titles=cycle([''])):    html_str=''    for df,title in zip(args, chain(titles,cycle(['&lt;/br&gt;'])) ):        html_str+='&lt;th style=\"text-align:center\"&gt;&lt;td style=\"vertical-align:top\"&gt;'        html_str+=f'&lt;h2&gt;{title}&lt;/h2&gt;'        html_str+=df.to_html().replace('table','table style=\"display:inline\"')        html_str+='&lt;/td&gt;&lt;/th&gt;'    display_html(html_str,raw=True)DatasetThe dataset used for this analysis compromises 71,000 messages focusing on English and Mandarin Chinese. The dataset is open sourced (at the time of writing) and available here. The details the dataset are also described in Chen, T., Kan, MY. Creating a live, public short message service corpus: the NUS SMS corpus, authored by the researchers who also collected the data.Let’s quickly have a look at the data:import pandas as pd# extract datasetdf_raw = pd.read_csv('data/clean_nus_sms.csv', index_col=0)df = df_raw.copy()# explore datsetprint(df_raw.keys())df_raw.head()Index(['id', 'Message', 'length', 'country', 'Date'], dtype='object')There are not many columns in the dataset, which makes it easier to stratify it or bin it. We could choose to bin it based on the length or Date columns but given that we’re taking an NLP approach and that language is normally country-depdendant. Because of that, let’s look at the distribution of the data based on the country:import matplotlib.pyplot as pltfig, ax = plt.subplots(1,1, figsize=(12,15))sns.histplot(    data=df,    y='country',    ax=ax,     color=COLORS[0])ax.set_xscale('log')ax.set_title('SMS count per country (LOGSCALE)')ax.set_ylabel('countries')ax.set_xlabel('count')locs, labels = plt.xticks()plt.setp(labels, rotation=0)plt.show()Noticing that the counts (x-axis) in the distribution are in log-scale, we see that we have a lot of data (SMS) for countries like Singapore (&gt;10,000), whereas for most countries we only have around 10 SMS. For this analysis, let’s only consider countries that have at least 1,000 SMS, and consider other bins of data to have an insuficient sample size for our analysis.However, we need to be careful because countries like Singapore or the USA two codes: ‘SG’ and ‘Singapore’. For simplicity and consistency, I’ll change ‘SG’ to ‘Singapore’ and ‘United States’ to ‘USA’. So we need to do a bit of data wrangling:import spacy as sp# change 'SG' to 'Singapore' and 'United states country' to 'USA'mask_sg = df['country'] == 'SG'df.loc[mask_sg, 'country'] = 'Singapore'mask_usa = df['country'] == 'United States'df.loc[mask_usa, 'country'] = 'USA'# group by countrycount_label = 'count_sms'df[count_label] = 1grouped_country = df.groupby(by='country', as_index=False)[count_label].count()# find what countries have a sample size greater than the threshold definedNSAMPLE_THD = 1000valid_countries = [row['country'] for index, row in grouped_country.iterrows() if row[count_label] &gt; NSAMPLE_THD]# filter out countries that have a statistically suficient sample sizedf_temp = df[df['country'].isin(valid_countries)].reset_index(drop=True)data_cols = [    'Message',    'length',    'country',    'Date']data = df_temp[data_cols]data.head()# filter out countries that don't meet criteria in grouped dfgrouped_country = grouped_country[grouped_country['country'].isin(valid_countries)].sort_values(count_label, ascending=True).reset_index(drop=True)# plot filtered distributionfig, ax = plt.subplots(1,1, figsize=(15,10), sharex=True)sns.barplot(    data=grouped_country,    y='country',    x=count_label,    ax=ax,     color=COLORS[0])ax.grid(True)ax.set_ylabel('countries')ax.set_title('SMS count per country (n &gt; 1000 SMS)')plt.show()That looks much neater! Also, it means that the analysis will be more statistically meaningful. One should note however that because the study was performed in Singapore, there’s an oversampling for Singapore datapoints. Given the other populations, we could randomly decimate the data for Singapore, but I won’t be doing that in this analysis.Text Pre-PreprocessingFor this project, the NLP library I chose is spaCy, because it allows one to customize and add components to NLP pipelines. In this context, a pipeline refers to different analytical tools or pre-rpocessing techniques to extract insight from text, such as the [lemmatizer]https://en.wikipedia.org/wiki/Lemmatisation) (which loosely speaking extract the ‘root’ of a word) or the tagger (which assigns part-of-speech tags to the words).Now into the fun part! Before we start using NLP tools, we need to clean our data. In NLP, this means that we’ll need to do some text pre-processing. For example, we might want to remove words that appear very often but are not very insightful, like ‘a’, ‘an’. These words are known as stopwords.Part of the pre-processing also entails building a good data-structure to embed the text data. Initially, I set to build a data-structure for the corpus (text-dataset) that would allow me to keep track of what country each SMS corresponds to. One can achieve that through annotations, and as mentioned before, the great thing about spaCy is that it allows one to customize elements of the nlp() pipeline. In this case, it meant that I added the country as an attribute extension to the Doc object:from spacy.tokens import Docadd_annotations = Falseif add_annotations:    Doc.set_extension('country', default=None, force=True)    corpus = data[[\"Message\",\"country\"]].astype(str).apply(tuple, axis=1).valuesHowever, upon some exploration I realised that the problem would be more challenging as some of these countries have a rich variety of languages (e.g. Singapore and India):print(    data[data['country'] == 'Singapore'].Message.values[:10], '\\n',    '='*180+'\\n',    data[data['country'] == 'India'].Message.values[:10], '\\n',    '='*180)['Bugis oso near wat...' 'Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...' 'I dunno until when... Lets go learn pilates...' 'Den only weekdays got special price... Haiz... Cant eat liao... Cut nails oso muz wait until i finish drivin wat, lunch still muz eat wat...' 'Meet after lunch la...' 'm walking in citylink now ü faster come down... Me very hungry...' '5 nights...We nt staying at port step liao...Too ex' 'Hey pple...$700 or $900 for 5 nights...Excellent location wif breakfast hamper!!!' 'Yun ah.the ubi one say if ü wan call by tomorrow.call 67441233 look for irene.ere only got bus8,22,65,61,66,382. Ubi cres,ubi tech park.6ph for 1st 5wkg days.èn' 'Hey tmr maybe can meet you at yck']  ==================================================================================================================================================================================== ['K' 'Studying?' 'Vch photo' 'K:-)ya i hav to finish' 'One senioq akka' 'K d' 'She vil mistake me only cha.dnt talk to me also' 'I am standing up' 'Sorry d v seriously forgot' 'Free']  ====================================================================================================================================================================================An English-trained model like en_core_web_sm won’t perform well on corpa with a diversity of languages, thus any insights drawn from the results would be biased to English-text patterns. So I decided to build a pre-processing pipeline for USA messages and then re-use the the pipeline for other countries on a different project.The main point of this pre-processing pipeline is to: (i) get rid of stopwords and (ii) extract the lemmas in the text (root of each word that’s still readable).from nltk.corpus import stopwords# extract stopword set and update with more colloquial wordsstop_words = {s.lower() for s in stopwords.words(\"english\")}# load model, get a subsample of the model and extract lemmasnlp = sp.load('en_core_web_sm')def text_preprocessing_pipeline(country):    '''    Find lemmas and pos_tag of a subset of SMS based on    country of origin    '''    country_sms = data[data['country'] == 'USA']    country_docs = nlp.pipe(country_sms['Message'].astype(str))    lemmas, pos_tags = [], []    for doc in country_docs:        lemma_i = [token.lemma_.lower() for token in doc if token.lemma_.isalpha() and token.lemma_.lower() not in stop_words]        if len(lemma_i) == 0:            pass        else:            lemmas.append(\" \".join(lemma_i))                pos_tags_i = {token.text: token.pos_ for token in doc}        pos_tags.append(pos_tags_i)                return lemmas, pos_tags            # run preprocess pipeline for USAlemmas, pos_tags = text_preprocessing_pipeline(country='USA')Next StepsNow that we have pre-processed the dataset (extracting the lemmas and removing stopwords), we can actually move on to analyse the corpus using NLP tools. That will require somehow turning text into numbers and numerical objects that can be analysed and processed more easily. If you’re interested, you can read further on NLP analysis on SMS text - part II!"
  },
  
  {
    "title": "Welcome!",
    "url": "/posts/welcome/",
    "categories": "",
    "tags": "",
    "date": "2022-08-03 09:49:00 +1000",
    





    "snippet": "Hey 👋 welcome to my personal wesbsite and Data Science portfolio! I’ll also aim to blog sporadically here about the data landscape, especially around responsible use of data and ML."
  }
  
]

